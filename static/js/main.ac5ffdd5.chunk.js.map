{"version":3,"sources":["components/Day.js","components/TempChart.js","components/Home.js","getWeatherAction.js","App.js","serviceWorker.js","rootReducer.js","index.js"],"names":["connect","state","chart","dispatch","changeChart","day","type","props","arr","mostAppearingDiscriptionInArray","weather","slice","sort","a","b","filter","v","length","pop","console","log","name","react_default","createElement","className","concat","onClick","src","alt","Math","round","max","apply","Object","toConsumableArray","temp_max","min","temp_min","data","chartData","options","shadow","enabled","color","top","left","blur","opacity","toolbar","show","colors","dataLabels","stroke","curve","title","text","cityName","country","align","offsetY","offsetX","grid","borderColor","row","markers","size","xaxis","categories","date","chart_discri_day","style","fontSize","yaxis","labels","formatter","y","legend","position","horizontalAlign","floating","series","id","react_apexcharts_min_default","height","Home","code","handlerChange","e","_this","setState","defineProperty","target","value","handlerClick","preventDefault","getWeather","formError","this","onSubmit","onChange","htmlFor","Error","days","map","components_TempChart","key","components_Day","Component","city","fetch","then","res","json","catch","error","App","components_Home","Boolean","window","location","hostname","match","initState","rootReducer","arguments","undefined","action","objectSpread","_ret","array","list","MonArr","TueArr","WedArr","ThuArr","FriArr","SatArr","SunArr","i","convert","push","moment","Date","dt_txt","format","main","toFixed","Number","getDay","actualday","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac5ffdd5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Day = (props) => {\r\n\r\n///// filter which value in Array appearing the most time / coz i getting for every 3h weather, discription/main-weather-status in array for each day\r\n  function mode(arr){\r\n    return arr.sort((a,b) =>\r\n          arr.filter(v => v===a).length\r\n        - arr.filter(v => v===b).length\r\n    ).pop();\r\n}\r\nconst mostAppearingDiscriptionInArray = mode(props.day.weather.slice()) // get new array from 'props.day.weather' array and do function on it\r\n\r\nconsole.log(mostAppearingDiscriptionInArray, props.day.name)\r\n\r\n\r\n///// returing string which prevent diffrent weather icons loading\r\n//// standard weather mian/discription which i can get from API\r\nconst whichIconNumberLoad = () => {\r\n  if (mostAppearingDiscriptionInArray === 'Light snow'){\r\n    return '13d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Clear'){\r\n    return '01d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Clouds'){\r\n    return '02d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Scattered clouds'){\r\n    return '03d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Broken clouds'){\r\n    return '04d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Shower rain'){\r\n    return '09d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Rain'){\r\n    return '10d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Thunderstorm'){\r\n    return '11d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Snow'){\r\n    return '13d'\r\n  } else if (mostAppearingDiscriptionInArray === 'Mist '){\r\n    return '50d'\r\n  } else {\r\n    return '10d'\r\n  }\r\n}\r\n  return (\r\n   // className={props.chart === props.day.name ? 'active': null} \r\n   \r\n      //// dynamic check and add class to card\r\n      <div className={`card day col s6 m3 l2 ${props.chart === props.day.name ? 'active': null}`} onClick={() => {props.changeChart(props.day)}}>\r\n                <div className=\"card-content\">\r\n                  <div className=\"title flow-text\">{props.day.name}</div>\r\n                  <img src={(`https://openweathermap.org/img/w/${whichIconNumberLoad()}.png`)} alt=\"icon\"></img>\r\n                  <div className=\"temp flow-text\">\r\n                      <span className=\"high\">{Math.round(Math.max(...props.day.temp_max))}°</span>\r\n                      <span className=\"low\">{Math.round(Math.min(...props.day.temp_min))}°</span>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    chart: state.chart\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeChart: (day) => { dispatch({type: 'CHANGE_CHART', day: day }) }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Day)\r\n","import React from 'react'\r\nimport Chart from \"react-apexcharts\";\r\nimport { connect } from 'react-redux'\r\n\r\nconst TempChart = (props) => {\r\n  \r\n  const { data } = props\r\n\r\n  const chartData = {\r\n    options: {\r\n      chart: {\r\n        shadow: {\r\n          enabled: true,\r\n          color: '#000',\r\n          top: 18,\r\n          left: 7,\r\n          blur: 10,\r\n          opacity: 1\r\n        },\r\n        toolbar: {\r\n          show: false\r\n        }\r\n      },\r\n      colors: ['#77B6EA', '#545454'],\r\n      dataLabels: {\r\n        enabled: true,\r\n      },\r\n      stroke: {\r\n        curve: 'smooth'\r\n      },\r\n      title: {\r\n        text: data.cityName + \" - \" + data.country,\r\n        align: 'left',\r\n        offsetY: 10,\r\n        offsetX: 30,\r\n      },\r\n      grid: {\r\n        borderColor: '#e7e7e7',\r\n        row: {\r\n          colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n          opacity: 0.5\r\n        },\r\n      },\r\n      markers: {\r\n        \r\n        size: 6\r\n      },\r\n      xaxis: {\r\n        categories: props.day.date,\r\n          title: {\r\n            text: props.day.day + \" - \" + props.day.chart_discri_day,\r\n            style: {\r\n                fontSize:  '20px',\r\n                color:  '#263238'\r\n              }\r\n          }\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: 'Temperature'\r\n        },\r\n        min: Math.round(Math.min(...props.day.temp_min)) - 2,\r\n        max: Math.round(Math.max(...props.day.temp_max)) + 2,\r\n        labels: {\r\n              formatter: function (y) {\r\n                  return Math.round(y) + \"°\";\r\n              }\r\n          }\r\n      },\r\n      legend: {\r\n        position: 'top',\r\n        horizontalAlign: 'right',\r\n        floating: true,\r\n        offsetY: -30,\r\n        offsetX: 0\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n          name: \"Max temp\",\r\n          data: props.day.temp_max\r\n      },\r\n      {\r\n          name: \"Min temp\",\r\n          data: props.day.temp_min\r\n      }\r\n\r\n    ],\r\n  }\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n  if (data.chart === props.day.name) {\r\n      return (\r\n\r\n          <div id=\"chart\">\r\n              <Chart options={chartData.options} series={chartData.series} type=\"line\" height=\"350\" />\r\n          </div>\r\n        \r\n      )\r\n  } else {\r\n      return null\r\n  }\r\n        \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state,\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TempChart)","import React, { Component } from 'react'\r\nimport Day from './Day'\r\nimport { connect } from 'react-redux'\r\nimport { getWeather } from '../getWeatherAction'\r\nimport TempChart from './TempChart'\r\n\r\nclass Home extends Component {\r\n  state = { \r\n      name:'krakow',\r\n      code:'pl',\r\n  }\r\n  componentDidMount(){\r\n    this.props.getWeather(this.state)  \r\n  }\r\n  handlerChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n  handlerClick = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.name.length > 0 && this.state.code.length > 0){\r\n      this.props.getWeather(this.state);\r\n    } else {\r\n      this.props.formError();\r\n    }\r\n  }\r\n  render() {\r\n   const { data } = this.props\r\n\r\n    return (\r\n      <div className=\"container row\">\r\n        \r\n        <div className=\"card red-white col s12 m12 l12\"> \r\n          <form onSubmit={this.handlerClick}>\r\n            <div className=\"input-field col s12 m6 \">\r\n              <input id=\"name\" type=\"text\" onChange={this.handlerChange}/>\r\n              <label htmlFor=\"name\">City Name</label>\r\n            </div>\r\n            <div className=\"input-field col s6 m4\">\r\n            <input id=\"code\" type=\"text\" onChange={this.handlerChange}/>\r\n              <label htmlFor=\"code\">Country Code</label>\r\n            </div>\r\n            <div className=\"input-field col s6 m2\">\r\n              <button type=\"submit\" className=\"waves-effect waves-light btn-large light-blue lighten-2\" onClick={this.handlerClick}><i className=\"material-icons\">search</i></button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        { data.Error ? <div className=\"red-text col s12 m12 l12\">{data.Error}</div> : null}\r\n\r\n        <div className=\"card col s12 m12 l12\">       \r\n          { data.days && data.days.map(day => {\r\n              if (day.date.length !== 0) {\r\n                return <TempChart day={day} key={day.id}/>\r\n              } else {\r\n                return null\r\n              }\r\n            })}\r\n        </div>\r\n\r\n        { data.days && data.days.map(day => {\r\n            if (day.date.length !== 0) {\r\n              return <Day day={day} key={day.id}/>\r\n            } else {\r\n              return null\r\n            }\r\n          })}\r\n      \r\n      </div>\r\n        \r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    data: state\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getWeather: (city) => { dispatch(getWeather(city)) },  \r\n    formError: () => { dispatch({ type: 'FORM_ERROR'}) } \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n","export const getWeather = (city) => {\r\n    return (dispatch) => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city.name},${city.code}&APPID=6f7f051af44ea396d568620c70082877`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            dispatch({ type: 'GET_WEATHER', data});\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: 'GET_WEATHER_ERROR', error});\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\nimport Home from './components/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import moment from 'moment'\r\n\r\nconst initState = {\r\n    chart: \"\",  // this variables control which chart is active and which card day has class active(border)\r\n    country: '', cityName: '', Error: null\r\n}\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === 'GET_WEATHER'){\r\n        console.log(action.data)\r\n        const array = action.data.list\r\n        \r\n        //////// editing response from OpenWeatherMap APPI to get and set 3arrays in each day (data=time(every3hours/min-temp/max-temp) ) to put in Chart\r\n\r\n        const MonArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Monday', name: 'Mon', id: 1}\r\n        const TueArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Tuesday', name: 'Tue', id: 2}\r\n        const WedArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Wednesday', name: 'Wed', id: 3}\r\n        const ThuArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Thursday', name: 'Thu', id: 4}\r\n        const FriArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Friday', name: 'Fri', id: 5}\r\n        const SatArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Saturday', name: 'Sat', id: 6}\r\n        const SunArr ={date:[], temp_min:[], temp_max:[], weather: [], day: 'Sunday', name: 'Sun', id: 7}\r\n\r\n        for(let i=0;i<array.length;i++){\r\n\r\n            function convert(day, i){\r\n                day.date.push(moment(new Date(array[i].dt_txt)).format('LT'));\r\n                day.temp_min.push((Math.round((array[i].main.temp_min - 273.15) * 100)/100).toFixed(1));\r\n                day.temp_max.push(Number((Math.round((array[i].main.temp_max - 273.15) * 100)/100).toFixed(1)));\r\n                day.weather.push(array[i].weather[0].main);\r\n\r\n                day.chart_discri_day = moment(new Date(array[i].dt_txt)).format('LL');\r\n            }\r\n\r\n            if (new Date(array[i].dt_txt).getDay() === 0) {\r\n                convert(SunArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 1) {\r\n                convert(MonArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 2) {\r\n                convert(TueArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 3) {\r\n                convert(WedArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 4) {\r\n                convert(ThuArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 5) {\r\n                convert(FriArr, i)\r\n            } else if (new Date(array[i].dt_txt).getDay() === 6) {\r\n                convert(SatArr, i)\r\n            } \r\n        }\r\n        const actualday = new Date(array[0].dt_txt).getDay() ///// this valuue is from 0-6 which mean 0 = Sunday, 1 = Monday... so on\r\n\r\n        ///// When i requesting data from appi i am getting data which are started from actual day and time, so i wanted to display cards from actual day / returning ordered data which depends from data which i get\r\n        if (actualday === 0) {\r\n            return {\r\n                ...state,\r\n              days: [{...SunArr}, {...MonArr},{...TueArr},{...WedArr},{...ThuArr},{...FriArr},{...SatArr}],\r\n              chart: 'Sun',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 1) {\r\n            return {\r\n                ...state,\r\n              days: [{...MonArr},{...TueArr},{...WedArr},{...ThuArr},{...FriArr},{...SatArr},{...SunArr}],\r\n              chart: 'Mon',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 2) {\r\n            return {\r\n                ...state,\r\n              days: [{...TueArr},{...WedArr},{...ThuArr},{...FriArr},{...SatArr},{...SunArr},{...MonArr}],\r\n              chart: 'Tue',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 3) {\r\n            return {\r\n                ...state,\r\n              days: [{...WedArr},{...ThuArr},{...FriArr},{...SatArr},{...SunArr},{...MonArr},{...TueArr}],\r\n              chart: 'Wed',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 4) {\r\n            return {\r\n                ...state,\r\n              days: [{...ThuArr},{...FriArr},{...SatArr},{...SunArr}, {...MonArr},{...TueArr},{...WedArr}],\r\n              chart: 'Thu',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 5) {\r\n            return {\r\n                ...state,\r\n              days: [{...FriArr},{...SatArr},{...SunArr}, {...MonArr},{...TueArr},{...WedArr},{...ThuArr}],\r\n              chart: 'Fri',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else if (actualday === 6) {\r\n            return {\r\n                ...state,\r\n              days: [{...SatArr},{...SunArr}, {...MonArr},{...TueArr},{...WedArr},{...ThuArr},{...FriArr}],\r\n              chart: 'Sat',\r\n              country: action.data.city.country, cityName: action.data.city.name, Error: null\r\n            }\r\n        } else {\r\n            return state\r\n        }\r\n     \r\n\r\n    } else if (action.type === 'GET_WEATHER_ERROR') {\r\n        console.log('Get weather ERROR', action.error)\r\n        return {\r\n            ...state,\r\n            Error: 'City not found'\r\n        }\r\n    } else if (action.type === 'FORM_ERROR') {\r\n        console.log('form error')\r\n        return {\r\n            ...state,\r\n            Error: 'You must fill all inputs'\r\n        }\r\n    } else if (action.type === 'CHANGE_CHART') {\r\n        console.log('chart changed')\r\n        return {\r\n            ...state,\r\n            chart: action.day.name\r\n        }\r\n    } else {\r\n        return state\r\n    }\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './rootReducer';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}